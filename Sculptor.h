#ifndef SCULPTOR_H
#define SCULPTOR_H

#include <iostream>
#include <fstream>

#include "vector"
#include "Voxel.h"
  /*!
  * @brief Enum for defining the sampling plan
  */
  enum{ XY, YZ, ZX };

  /*! \brief Sculptor class for manipulating elements, denoted voxels, in arrays
  *         three-dimensional digital.
  */
  class Sculptor {
    protected:
      Voxel ***v; /**< Digital array of three-dimensional voxels*/

      int nx; /**< Digital scaler of voxel matrix on the x-axis.*/
      int ny; /**< Digital scaler of voxel matrix on the y-axis.*/
      int nz; /**< Digital scaler of voxel matrix on the z-axis.*/

      float r; /**< R (Red) color component in RGBA format for voxel implementation*/
      float g; /**< G (Green) color component in RGBA format for voxel implementation*/
      float b; /**< B (Blue) color component in RGBA format for voxel implementation*/
      float a; /**< Color component A (Alpha) in RGBA format for voxels implementation*/

    public:

      //! Class constructor.
      /*!
        @brief This constructor will receive the dimensional parameters of the voxel array and
        will construct an instance of the Sculptor class.

        @param _x Integer digital scaler of the voxel matrix on the X axis;
        @param _y Integer digital scaler of the voxel matrix on the Y axis;
        @param _z Integer digital dimensioner of the voxel matrix on the Z axis.


        It will dynamically allocate, with the dimensions passed, the voxel array **v** and
        set the color elements (**r**, **g**, **b** and **a**) to their default values: 0.0.
      */
      Sculptor(int _nx, int _ny, int _nz);

      //! Class Destructor.
      /*!
        @brief When executed, it will free the dynamically allocated memory space for the three-dimensional array
        with the dimensions informed during the execution of the program.
      */
      ~Sculptor();

      //! Member function setColor.
      /*!
        @brief Will configure the private attributes **r**, **g**, **b** and **a** for the received values
        as a parameter of the function.

        @param r     Represents the R (Red) component of color in the RGBA model in a range from 0.0 to 1.0;
        @param g     Represents the G (Green) component of color in the RGBA model in a range from 0.0 to 1.0;
        @param b     Represents the component B (Blue) of color in the RGBA model in a range from 0.0 to 1.0;
        @param alpha Represents the A (Alpha - Transparency) component of color in the RGBA model in a range from 0.0 to 1.0.

        @return ***void***;
      */
      void setColor(float r, float g, float b, float alpha);

      //! Member function putVoxel.
      /*!
        @brief This method will tell the system that a voxel should be **shown** in the voxel array
        in the coordinates **x**, **y** and **z** that were passed as a parameter.

        @param x Represents a coordinate on the **x** axis of the 3D voxel matrix plane;
        @param y Represents a coordinate on the **y** axis of the 3D voxel matrix plane;
        @param z Represents a coordinate on the **z** axis of the 3D voxel matrix plane;

        @return ***void***;
      */

      void putVoxel(int x, int y, int z);

      //! CutVoxel member function.
      /*!
        @brief This method will tell the system that a voxel should be **deleted** in the voxel array
        in the coordinates **x**, **y** and **z** that were passed as a parameter.

        @param x Represents a coordinate on the **x** axis of the 3D voxel matrix plane;
        @param y Represents a coordinate on the **y** axis of the 3D voxel matrix plane;
        @param z Represents a coordinate on the **z** axis of the 3D voxel matrix plane;

        @return ***void***;
      */
      void cutVoxel(int x, int y, int z);

      //! Write OFF member function.
      /*!
        @brief This method will use all the data present in the sculptor class to assemble a simple text file in the
        structure of a named OFF (Object File Format) and in the directory passed as a parameter.

        @param filename name/path of the plain text file to be created/edited with the content generated by the class;

        @return ***void***;
      */
      void writeOFF(std::string filename);
      //! ReadMx member function.
      /**
      * @brief A function to aid interaction and vision in different 2D planes;
      * @param dimension Represents the coordinate of the plane being viewed;
      * @param plan Represents plan that will be visualized;
      *
      * @return ***std::vector<std::vector<Voxel>> ***;
      */
      std::vector<std::vector<Voxel>> readMx(int dimension = 0, int plan = XY);
      //! clearAll member function.
      /**
      * @brief returns the sculptor's data to its beginning.
      */
      void clearAll();
  };

#endif // SCULPTOR_H
